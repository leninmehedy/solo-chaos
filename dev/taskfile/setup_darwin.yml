version: '3'

tasks:
  doctor:
    desc: Check environment dependencies for Solo network
    cmds:
      - task check-docker
      - |
        echo "üîç Checking required CLI tools..."
        for cmd in docker kubectl k9s kind helm jq kubectx; do
          if ! command -v $cmd >/dev/null 2>&1; then
            echo "‚ùå Missing: $cmd"
          else
            echo "‚úÖ $cmd found: $(command -v $cmd)"
          fi
        done
      - |
        echo "üîç Checking optional tools..."
        for cmd in k9s; do
          if ! command -v $cmd >/dev/null 2>&1; then
            echo "‚ö†Ô∏è  Missing (optional): $cmd"
          else
            echo "‚úÖ $cmd found: $(command -v $cmd)"
          fi
        done
      - |
        echo "üîç Checking Node.js & NVM..."
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        if ! command -v nvm >/dev/null 2>&1; then
          echo "‚ùå NVM not installed"
        else
          echo "‚úÖ NVM installed"
          if ! nvm ls {{.NODE_VERSION}} | grep -q {{.NODE_VERSION}}; then
            echo "‚ö†Ô∏è  Node.js {{.NODE_VERSION}} not installed in NVM"
          else
            echo "‚úÖ Node.js {{.NODE_VERSION}} available"
          fi
        fi
      - |
        echo "üîç Checking npm package @hashgraph/solo..."
        if ! npm list -g | grep -q '@hashgraph/solo'; then
          echo "‚ö†Ô∏è  @hashgraph/solo not installed globally"
        else
          echo "‚úÖ @hashgraph/solo is installed"
        fi
      - echo "‚úÖ Doctor checks completed."
  
  check-docker:
    desc: Check docker settings
    silent: true
    cmds:
      - |
        echo "üîç Checking Docker Desktop resources..."
        docker_info=$(docker info --format '{{"{{json .}}"}}')
        mem=$(echo "$docker_info" | jq '.MemTotal' 2>/dev/null || echo 0)
        cpus=$(echo "$docker_info" | jq '.NCPU' 2>/dev/null || echo 0)
        min_mem=$((46 * 1024 * 1024 * 1024))
        min_cpus=10
        if [ "$mem" -lt "$min_mem" ] || [ "$cpus" -lt "$min_cpus" ]; then
          echo "‚ùå Docker Desktop resources too low: CPUs=$cpus, Mem=$(($mem/1024/1024/1024))GB"
          echo "‚û°Ô∏è  Please set at least 48GB RAM and 10 CPUs in Docker Desktop > Settings > Resources."
          exit 1
        else
          echo "‚úÖ Docker Desktop resources OK: CPUs=$cpus, Mem=$(($mem/1024/1024/1024))GB"
        fi
    
  
  init:
    desc: Initialize the environment (idempotent)
    silent: true
    cmds:
      - |
        echo "üîç Checking and installing required CLI tools..."
        for cmd in kubectl k9s kind helm jq kubectx; do
          if ! command -v $cmd &> /dev/null; then
            echo "‚¨áÔ∏è  Installing $cmd..."
            brew install $cmd
          else
            echo "‚úÖ $cmd already installed"
          fi
        done
      - |
        echo "üîç Checking NVM..."
        if ! command -v nvm &> /dev/null; then
          echo "‚¨áÔ∏è  Installing NVM..."
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
        else
          echo "‚úÖ NVM already installed"
        fi
      - |
        echo "üîç Checking Node.js version..."
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        if ! nvm ls ${NODE_VERSION} | grep -q "${NODE_VERSION}"; then
          echo "‚¨áÔ∏è  Installing Node.js ${NODE_VERSION}..."
          nvm install ${NODE_VERSION}
        fi
        echo "‚úÖ Using Node.js ${NODE_VERSION}"
      - |
        echo "üîç Checking @hashgraph/solo..."
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        if ! npm list -g | grep -q '@hashgraph/solo'; then
          echo "‚¨áÔ∏è  Installing @hashgraph/solo..."
          npm install -g @hashgraph/solo
        else
          echo "‚úÖ @hashgraph/solo already installed"
        fi
      - echo "üéâ Environment initialization complete!"
      - task doctor
  
  reset:
    desc: Rollback environment initialization
    silent: true
    cmds:
      - |
        echo "üßπ Removing CLI tools..."
        for cmd in kubectl k9s kind helm; do
          if command -v $cmd &> /dev/null; then
            echo "‚ùå Uninstalling $cmd..."
            brew uninstall $cmd || true
          fi
        done
      - |
        echo "üßπ Removing @hashgraph/solo..."
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        if npm list -g | grep -q '@hashgraph/solo'; then
          npm uninstall -g @hashgraph/solo
        fi
      - |
        echo "üßπ Removing Kind cluster..."
        if kind get clusters | grep -q "${SOLO_CLUSTER_NAME}"; then
          kind delete cluster --name "${SOLO_CLUSTER_NAME}"
          echo "‚úÖ Cluster ${SOLO_CLUSTER_NAME} deleted"
        else
          echo "‚ÑπÔ∏è  No cluster named ${SOLO_CLUSTER_NAME} found"
        fi
      - |
        echo "üßπ Cleaning up ~/.solo..."
        rm -rf ~/.solo || true
        echo "‚úÖ Cleanup complete"

  
