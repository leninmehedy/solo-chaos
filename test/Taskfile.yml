version: '3'

# Environment variables for the test
dotenv: ['.env', '{{.ENV}}/.env', '{{.HOME}}/.env']

vars:
  SOLO_NAMESPACE: "{{.SOLO_NAMESPACE | default \"solo\"}}"
  TEST_REGION: "{{.REGION | default \"us\"}}"

tasks:
  e2e-test-netem-region-us:
    desc: End-to-end test for netem chaos experiments in US region
    vars:
      REGION: "us"
      EXPECTED_LATENCY_US: "~50ms"
      EXPECTED_LATENCY_EU: "~100ms" 
      EXPECTED_LATENCY_AP: "~200ms"
    cmds:
      - echo "üß™ Starting E2E test for netem chaos experiments - Region {{.REGION}}"
      - echo "üìã Test Plan:"
      - echo "  1. Deploy Solo network"
      - echo "  2. Install Chaos Mesh"
      - echo "  3. Deploy cluster diagnostics with chaos experiments"
      - echo "  4. Verify network latency from {{.REGION}} region"
      - echo "  5. Cleanup"
      - echo ""
      - echo "üîÑ Step 1 - Deploying Solo network..."
      - task -f ../Taskfile.yml deploy-network
      - echo "üîÑ Step 2 - Installing Chaos Mesh..."
      - task -f ../Taskfile.yml install-chaos-mesh
      - echo "‚è≥ Waiting for Chaos Mesh to be ready..."
      - kubectl wait --for=condition=Ready pods -l app.kubernetes.io/name=chaos-mesh -n chaos-mesh --timeout=300s || echo "‚ö†Ô∏è Chaos Mesh not ready, continuing anyway"
      - echo "üîÑ Step 3 - Deploying cluster diagnostics with chaos experiments..."
      - task -f ../Taskfile.yml chaos:network:deploy-cluster-diagnostics REGION={{.REGION}}
      - echo "‚è≥ Waiting for cluster diagnostics to be ready..."
      - kubectl wait --for=condition=Ready pods -l app=cluster-diagnostics -n solo --timeout=300s || echo "‚ö†Ô∏è Cluster diagnostics not ready, continuing anyway"
      - echo "üîÑ Step 4 - Running latency verification tests..."
      - task verify-network-latency REGION={{.REGION}} EXPECTED_LATENCY_US="{{.EXPECTED_LATENCY_US}}" EXPECTED_LATENCY_EU="{{.EXPECTED_LATENCY_EU}}" EXPECTED_LATENCY_AP="{{.EXPECTED_LATENCY_AP}}"
      - echo "üîÑ Step 5 - Cleaning up..."
      - task cleanup-test-environment
      - echo "‚úÖ E2E test completed successfully!"

  exec-cluster-diagnostics:
    desc: Execute into cluster diagnostics pod for manual testing
    vars:
      REGION: "{{.REGION | default \"us\"}}"
      NODE_NAME: "{{.NODE_NAME | default \"node3\"}}"
    cmds:
      - echo "üîó Using enhanced exec task from chaos taskfile..."
      - task -f ../Taskfile.yml chaos:network:exec-cluster-diagnostics REGION={{.REGION}} NODE_NAME={{.NODE_NAME}}

  verify-network-latency:
    desc: Verify network latency from cluster diagnostics pods
    vars:
      REGION: "{{.REGION | default \"us\"}}"
      SOURCE_NODE: "node3"
      EXPECTED_LATENCY_US: "{{.EXPECTED_LATENCY_US}}"
      EXPECTED_LATENCY_EU: "{{.EXPECTED_LATENCY_EU}}"
      EXPECTED_LATENCY_AP: "{{.EXPECTED_LATENCY_AP}}"
    cmds:
      - echo "üîç Verifying network latency from {{.SOURCE_NODE}} ({{.REGION}} region)..."
      - echo ""
      - echo "üì° Testing ping to AP region (node1) - Expected {{.EXPECTED_LATENCY_AP}}"
      - |
        POD=$(kubectl get pods -n solo -l app=cluster-diagnostics -o jsonpath="{.items[0].metadata.name}")
        if [[ -n "$POD" ]]; then
          kubectl exec $POD -n solo -- ping -c 5 node1-svc.cluster-diagnostics.svc.cluster.local || echo "‚ö†Ô∏è Ping to AP region failed or latency not as expected"
        else
          echo "‚ùå No cluster diagnostics pod found"
        fi
      - echo ""
      - echo "üì° Testing ping to EU region (node2) - Expected {{.EXPECTED_LATENCY_EU}}"
      - |
        POD=$(kubectl get pods -n solo -l app=cluster-diagnostics -o jsonpath="{.items[0].metadata.name}")
        if [[ -n "$POD" ]]; then
          kubectl exec $POD -n solo -- ping -c 5 node2-svc.cluster-diagnostics.svc.cluster.local || echo "‚ö†Ô∏è Ping to EU region failed or latency not as expected"
        else
          echo "‚ùå No cluster diagnostics pod found"
        fi
      - echo ""
      - echo "üì° Testing ping to high latency node (node4) - Expected ~800ms"
      - |
        POD=$(kubectl get pods -n solo -l app=cluster-diagnostics -o jsonpath="{.items[0].metadata.name}")
        if [[ -n "$POD" ]]; then
          kubectl exec $POD -n solo -- ping -c 5 node4-svc.cluster-diagnostics.svc.cluster.local || echo "‚ö†Ô∏è Ping to high latency node failed or latency not as expected"
        else
          echo "‚ùå No cluster diagnostics pod found"
        fi
      - echo ""
      - echo "‚úÖ Latency verification completed. Review output above to confirm expected delays."

  cleanup-test-environment:
    desc: Clean up test environment after e2e tests
    cmds:
      - echo "üßπ Cleaning up test environment..."
      - echo "üîÑ Removing cluster diagnostics..."
      - task -f ../Taskfile.yml chaos:network:cleanup-cluster-diagnostics
      - echo "üîÑ Removing chaos experiments..."
      - task -f ../Taskfile.yml chaos:network:cleanup-networkchaos
      - echo "üîÑ Uninstalling Chaos Mesh..."
      - task -f ../Taskfile.yml uninstall-chaos-mesh
      - echo "üîÑ Destroying Solo network..."
      - task -f ../Taskfile.yml destroy-network
      - echo "‚úÖ Test environment cleanup completed"

  test-ping-manual:
    desc: Manual ping test helper - run specific ping tests
    vars:
      SOURCE_NODE: "{{.SOURCE_NODE | default \"node3\"}}"
      TARGET_REGION: "{{.TARGET_REGION | default \"ap\"}}"
    cmds:
      - echo "üîç Manual ping test from {{.SOURCE_NODE}} to {{.TARGET_REGION}} region..."
      - |
        case "{{.TARGET_REGION}}" in
          "ap")
            TARGET_SERVICE="node1-svc.cluster-diagnostics.svc.cluster.local"
            EXPECTED="~200ms"
            ;;
          "eu")
            TARGET_SERVICE="node2-svc.cluster-diagnostics.svc.cluster.local"
            EXPECTED="~100ms"
            ;;
          "us")
            TARGET_SERVICE="node3-svc.cluster-diagnostics.svc.cluster.local"
            EXPECTED="~50ms"
            ;;
          *)
            echo "‚ùå Invalid region. Use: ap, eu, or us"
            exit 1
            ;;
        esac
        echo "üì° Pinging ${TARGET_SERVICE} (Expected latency: ${EXPECTED})"
        POD=$(kubectl get pods -n solo -l app=cluster-diagnostics -o jsonpath="{.items[0].metadata.name}")
        if [[ -n "$POD" ]]; then
          kubectl exec $POD -n solo -- ping -c 10 ${TARGET_SERVICE}
        else
          echo "‚ùå No cluster diagnostics pod found"
        fi

  list-chaos-experiments:
    desc: List active chaos experiments
    cmds:
      - echo "üìã Active NetworkChaos experiments:"
      - kubectl get networkchaos -n chaos-mesh -o wide || echo "No NetworkChaos experiments found"
      - echo ""
      - echo "üìã Active cluster diagnostics pods:"
      - kubectl get pods -n solo -l app=cluster-diagnostics -o wide || echo "No cluster diagnostics pods found"