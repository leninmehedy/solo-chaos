version: '3'

# Taskfile.root.yml contains environment variables and other variables
# Taskfile.chaos.yml contains the chaos-related common tasks

tasks:
  consensus-network-bandwidth:
    desc: Run Network Chaos experiments (limited bandwidth)
    vars:
      NAMESPACE: "{{.SOLO_NAMESPACE}}"
      NODE_NAMES: "{{.NODE_NAMES}}"
      RATE: '{{.RATE | default "1gbps"}}'
      LIMIT: '{{.LIMIT | default 20971520}}'   # LIMIT in bytes (20MB)
      BUFFER: '{{.BUFFER | default 102400}}'   # BUFFER in bytes (100KB)
    cmds:
      - echo "üîç Validating environment variables..."
      - "{{.TASKFILE_DIR}}/validate-env.sh --require-namespace --require-node-names"
      - echo "üîÑ Running Network Bandwidth Chaos experiments..."
      - echo "NAMESPACE=${NAMESPACE}, NODE_NAMES=${NODE_NAMES}, UUID=${UUID}"
      - envsubst < {{.TASKFILE_DIR}}/network/consensus-node-bandwidth.yml | kubectl apply -f -
      - echo "‚úÖ Network Bandwidth Chaos experiments applied."
      - task show-experiment-status NAME="solo-chaos-network-bandwidth-{{.UUID}}" TYPE="NetworkChaos"
    env:
      NAMESPACE: "{{.NAMESPACE}}"
      NODE_NAMES: "{{.NODE_NAMES}}"
      RATE: "{{.RATE}}"
      LIMIT: "{{.LIMIT}}"
      BUFFER: "{{.BUFFER}}"
      UUID: "{{.UUID}}"

  consensus-network-netem:
    desc: Run Network Chaos experiments (network emulation with global RTT latencies)
    vars:
      NAMESPACE: "{{.NAMESPACE | default .SOLO_NAMESPACE}}"
    cmds:
      - echo "üîç Validating environment variables..."
      - "{{.TASKFILE_DIR}}/validate-env.sh --require-namespace"
      - echo "üîÑ Running Network Latency Chaos experiments with global RTT emulation..."
      - echo "NAMESPACE=${NAMESPACE}"
      - echo "Applying region-based latency - us<->us 20ms RTT, us<->eu 100ms RTT, us<->ap 200ms RTT, eu<->eu 20ms RTT, eu<->ap 300ms RTT, ap<->ap 20ms RTT"
      - envsubst < {{.TASKFILE_DIR}}/network/netem-800ms.yml | kubectl apply -f -
      - envsubst < {{.TASKFILE_DIR}}/network/netem-ap-melbourne.yml | kubectl apply -f -
      - envsubst < {{.TASKFILE_DIR}}/network/netem-eu-london.yml | kubectl apply -f -
      - envsubst < {{.TASKFILE_DIR}}/network/netem-us-ohio.yml | kubectl apply -f -
      - echo "‚úÖ Global latency Chaos experiments applied."
      - task show-experiment-status NAME="solo-chaos-network-netem-800ms" TYPE="NetworkChaos"
      - task show-experiment-status NAME="solo-chaos-network-netem-ap-to-ap" TYPE="NetworkChaos"
      - task show-experiment-status NAME="solo-chaos-network-netem-ap-to-us" TYPE="NetworkChaos"
      - task show-experiment-status NAME="solo-chaos-network-netem-ap-to-eu" TYPE="NetworkChaos"
      - task show-experiment-status NAME="solo-chaos-network-netem-eu-to-eu" TYPE="NetworkChaos"
      - task show-experiment-status NAME="solo-chaos-network-netem-eu-to-us" TYPE="NetworkChaos"
      - task show-experiment-status NAME="solo-chaos-network-netem-eu-to-ap" TYPE="NetworkChaos"
      - task show-experiment-status NAME="solo-chaos-network-netem-us-to-us" TYPE="NetworkChaos"
      - task show-experiment-status NAME="solo-chaos-network-netem-us-to-eu" TYPE="NetworkChaos"
      - task show-experiment-status NAME="solo-chaos-network-netem-us-to-ap" TYPE="NetworkChaos"
    env:
      NAMESPACE: "{{.NAMESPACE}}"
  deploy-cluster-diagnostics:
    desc: Deploy cluster diagnostics pods
    vars:
      REGION: "{{.REGION | default \"us\"}}"
    cmds:
      - echo "üîç Validating environment variables..."
      - "{{.TASKFILE_DIR}}/validate-env.sh --require-region"
      - echo "üßπ Cleaning up existing NetworkChaos experiments..."
      - task network:cleanup-networkchaos
      - echo "üöÄ Deploying cluster diagnostics pods with region={{.REGION}}..."
      - envsubst < {{.TASKFILE_DIR}}/../dev/k8s/cluster-diagnostics.yaml | kubectl apply -f -
      - echo "‚è≥ Waiting for cluster diagnostics pods to be ready..."
      - kubectl wait --for=condition=ready pod -l app=cluster-diagnostics -n solo --timeout=120s
      - echo "‚úÖ Cluster diagnostics pods deployed and ready."
      - echo "üîÑ Starting network chaos experiments..."
      - task network:consensus-network-netem
    env:
      REGION: "{{.REGION}}"

  exec-cluster-diagnostics:
    desc: Exec into the cluster diagnostics pod for network testing
    interactive: true
    vars:
      NAMESPACE: "{{.NAMESPACE | default .SOLO_NAMESPACE}}"
    cmds:
      - echo "üîç Validating environment variables..."
      - "{{.TASKFILE_DIR}}/validate-env.sh --require-namespace"
      - |
        echo "üîÑ Exec into cluster diagnostics pod..."
        POD=$(kubectl get pods -n "${NAMESPACE}" -l app=cluster-diagnostics -o jsonpath="{.items[0].metadata.name}")
        if [[ -n "$POD" ]]; then
          echo "Pod found: $POD"
          echo "Running exec..."
          kubectl exec -it -n "${NAMESPACE}" "$POD" -- /bin/bash
        else
          echo "‚ùå No cluster diagnostics pod found in namespace '${NAMESPACE}'"
          exit 1
        fi
    env:
      NAMESPACE: "{{.NAMESPACE}}"

  cleanup-networkchaos:
    desc: Clean up all NetworkChaos resources
    cmds:
      - echo "üßπ Cleaning up NetworkChaos experiments..."
      - kubectl delete networkchaos --all -n chaos-mesh --ignore-not-found=true
      - echo "‚úÖ Cleanup completed."

  cleanup-cluster-diagnostics:
    desc: Clean up cluster diagnostics pods
    vars:
      NAMESPACE: "{{.NAMESPACE | default .SOLO_NAMESPACE}}"
    cmds:
      - echo "üîç Validating environment variables..."
      - "{{.TASKFILE_DIR}}/validate-env.sh --require-namespace"
      - echo "üßπ Cleaning up cluster diagnostics pods..."
      - kubectl delete deployment cluster-diagnostics -n ${NAMESPACE} --ignore-not-found=true
      - kubectl delete service cluster-diagnostics-svc -n ${NAMESPACE} --ignore-not-found=true
      - kubectl delete configmap cluster-diagnostics-cm -n ${NAMESPACE} --ignore-not-found=true
      - kubectl delete serviceaccount cluster-diagnostics-sa -n ${NAMESPACE} --ignore-not-found=true
      - kubectl delete clusterrole cluster-diagnostics-role --ignore-not-found=true
      - kubectl delete clusterrolebinding cluster-diagnostics-role-binding --ignore-not-found=true
      - echo "‚úÖ Cluster diagnostics cleanup completed."
    env:
      NAMESPACE: "{{.NAMESPACE}}"
